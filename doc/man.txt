

SYSTEM FUNCTIONS (Функционал системы БД)

"get" - Функция с помощью которой производиться выборка данных их таблицы, выбранной по умолчанию функцией set_t.     
"add" - Функция для добавления данных в таблицу, предвариетельно требует вызова функции set_t.    
"insert"  - Функция для вставки данных в таблицу, предвариетельно требует вызова функции set_t. 
"update" - Функция для обновления уже существующей записи, предвариетельно требует вызова функции set_t.
"remove"  - Функция для удаления записей из таблицы, предвариетельно требует вызова функции set_t.
"create_t" - Функция создания таблицы и инициализации начальными данными. 
"drop_t"   - Функция удаления таблицы, предвариетельно требует вызова функции set_t. 
"set_t"    - Функция для установленяи таблицы по умолчанию, к которой будет происходить косвенное обращение при всех вызовах функции для работы с даными.  
"print_t"  - Функция для вывода на экран содержимого таблицы переданной ей в качестве параметра.
"print"    - Функция для вывода на экран содержимого буфера, предварительно заполненого через вызов функция для выборки данных get. 
"count"    - Функция для расчета количесвта записей предварительно выбранных через функцию get. 
"clear"    - Функция для очистки будера записей.  
"log"      - Функция логирования, необходим если нужно вывести лог на экран или в файл(журнал ошибок) при выполнении тех или иных операции с данными.
"ltables"  - Функция для вывода на экран списка всех существующих таблиц. 
"ltriggers" - Функция для вывода на экран списка всех существующих тригеров.
"rolback"   - Функция отката системы, применяеться если при операциях с данными произошли ошибки нарушающие консистентность(целостность) данных.
"bef_attach" - Функция для активации (подписки на определенные события в БД, тип подписки <BEFORE>) тригеров.
"bef_detach" - Функция для дезактивации (отписки на определенные события в БД, тип отписки <BEFORE>) тригеров.
"aft_attach" - Функция для активации (подписки на определенные события в БД, тип подписки <AFTER>) тригеров.
"aft_detach" - Функция для дезактивации (отписки на определенные события в БД, тип отписки <AFTER>) тригеров.

"trigger" - Тригер это сущность которое выполняет определенные заранее определенные деиствя по
 наступлению определенного события, которое может определеить пользователь системы



ОПИСАНИЕ ЗАГОЛОВКОВ ФУНКЦИИ:

<DATE>  - дата формата (00.00.0000)

<TIME> - время формата (00:00)

<DESCRIPTION> - оптсание записис

<TABLE_NAME> - имя таблицы 

<FILE_NAME> - имя файла или путь к нему

<NAME> - символьное имя

<POSITION> - номер позиции

'|' - означает и/или


get(dt : '<DATE>'| ti : '<TIME>'| ds : '<DESCRIPTION>')

update(dt : '<DATE>'| ti : '<TIME>'| ds : '<DESCRIPTION>')

add(dt : '<DATE>' ti : '<TIME>' ds : '<DESCRIPTION>')

insert(ps : '<POSITION>' | dt : '<DATE>' ti : '<TIME>' ds : '<DESCRIPTION>')

remove(ps : '<POSITION>' | )

set_t(tn : '<TABLE_NAME>')

create_t()

drop_t()


print_t(tn : '<TABLE_NAME>')

print()

log(fn : '<FILE_NAME>'| ds : '<DESCRIPTION>')

clear()

count()

rolback()

ltables()

ltriggers()

bef_attach(nm : '<NAME>' op : '<ADD|INSERT|REMOVE|>')

aft_attach(nm : '' op : '<ADD|INSERT|REMOVE|>')

bef_detach(nm : '<NAME>')

aft_detach(nm : '<NAME>')


ОПИСАНИЕ ДЕКЛАРИРОВАНИЯ ТРИГЕРА:

trigger <NAME> { <TRIGGER_CODE> }


Примеры использования:

1)

    get(dt : '18.07.2020' ti : '6:52:59')   
    # произедет выборку и запишет индексы записей в буфер откуда 
    # потом их можно будет считать другой функциуй, например print()

    print() 
    # выведет нам на экран все записи которые были выбраны функцией get()

    clear()
    # чистим буфер после выборки и данных для дальнейших операции

2)

    insert(ps: '1' dt : '12.12.12' ti : '12:12' ds : 'new description')
    # произволиться вставка новой созданной записи по индексу 1

    log(ds : 'create new record!')
    # выводим на экран сообщение о том создана 
    # новая запись и вставлена в таблицу по индексу 1

3)

        # создаем транзвкцию, так как операции которые будем 
        # производить могу нарушить консистентность данных
        # это дает нам горантии того, что будут применены либо 
        # все изменению данных либо произойдет откат системы 
        # в случае не успешности транзакции
    {
        get(dt : '6:52:59')
        # призводим выборку данных для манипуляции над ними

        remove()
        # удаляем выбранные данные из таблицы

        clear()
        # очищаем буфер инексов которые нам больше не нужны
    }

4)

    set_t(tn : 'table')
    # устанавливаем значение таблицы с которой будем работать по умолчанию
    # в 'table'

    trigger test {
        log(ds : 'add new record in the table')
    }
    # создаем(декларируем) тригер, который будет
    # просто оповещать систему об каких-то изменениях


    bef_attach(nm : 'test' op : 'ADD|')
    # активируем тригер, подписавшись на событие добавления данных
    # теперь когда в таблице 'table' будут происхоить добавление данных
    # мы об этом узнаем

    def_deatch(nm : 'test');
    # здесь мы просто отписываемся от операции добавления данных,
    # мы говорим системе что мы бульше не ошит что бы она нас уведомляла
